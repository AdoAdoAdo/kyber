Black box model:
Low latency Dissent has the appearance of a 1-hop proxy:
clients transmit ciphertext to a server,
who decrypts the ciphertext,
and forwards the resulting cleartext.
In LLD, a set of clients communicate transmit ciphertext upstream
to a single relay
who processes the ciphertexts into a set of cleartext messages.
The relay then returns the output to the clients
and acts as an Internet relay for any cleartext packets
requesting Internet services.
This document discusses a specific approach
to performing these interactions
that retain the strong security parameters
of accountable DC-nets like Dissent.

Terms:
Clients - users of the service
Relays - data plane server 
Trustees - control plane server
Configuration - the online and active set of clients

Goal: clients communicate with only a single upstream relay,
who can perform a complete DC-net without active communication to trustees.

Background: This describes the document only describes the events
after a shuffle has completed.
In this model, only a single client transmits cleartext data,
in other words, there is only one slot.
The shuffle outputs an anonymous DH / DSA key
The approach naturally expands to multiple transmitters / slot owners
as described later.

Setup: Prior to beginning exchanges,
clients, relays, and trustees perform session setup
by first providing a public DH key
that can be used for verifying signatures and producing shared DH secrets.
Clients introduce an anonymous DH key into a shuffle performed by the trustees.
These keys are used to define pseudonyms or slots.
A session consists of many configurations
that a series of exchanging assuming a static set of online clients.

Each client takes each trustee's key in order to produce a shared secret.
Likewise each trustee takes each client's key
in order to produce a matching set of shared secrets.
Clients and trustees produce cover traffic or ciphertext streams
that when combined together cancel out.
Within a given stream,
the slot owner can embed his own message.
By combining all these messages,
the cipehrtext streams cancel out
revealing the slot owner's cleartext message.

In LLD, streams have a fundamental unit of cells.
Trustees use the client/trustee shared secrets
and the current cell index
as seeds to random number generators -- hash(secret | cell index) --
producing a ciphertext for each client.
Trustees produce ciphertext in batches,
at minimum of a cell size.
Trustees xor these ciphertexts together
and deliver them to the relay.

Similarly,
the clients use the client/trustee shared secrets
as seeds to random number generators
producing a ciphertext for each trustee.
The client then xors these together
and transmits at least an appropriate number of cells
to the upstream relay.
The number of cells depends on the previous state
of the cleartext and is defined in the section discussing slot format.

The relay accumulates trustee ciphertext and reserves it for later use.
After receiving a ciphertext from all clients in the configuration,
the relay combines all the ciphertext in order to produce
a cleartext message and transmits that to the clients.
The relay does not progress to the next exchange
until all clients have submitted
or a configurations time period has concluded.

- Certifying the Output

In order to certify the output of an exchange,
or that the relay forwarded the correct output of the DC-net,
each client signs the output of the previous round and transmits
it to the relay with its ciphertext,
the relay accumulates these signatures and transmits
them to all clients along with the cleartext.

- Preventing Disruption

In order to prevent disruption,
the anonymous slot owner and trustees introduce
an additional trap layer to the owner's cleartext message.
The slot owner shares a secret with each trustee
to produce an additional ciphertext stream.
The secret derives from the slot owner's DH key revealed during the shuffle
and a per-configuration DH key provided by the 
The client then will select a single trap bit out of every n-bits.
A trap bit is a bit in this additional ciphertext stream
that the client ignores (ands in a zero bit to his ciphertext)
In order to select trap bits,
the client hashes together the shared secrets
to produce a seed for selecting the bit-index within the n-bits.
After selecting the trap bits,
the client embeds messages without modifying the trap bits.
To do so, the client first randomizes his cleartext message
via OAEP and then splits it into (n-1)-bit blocks.
The first bit is used as an inversion flag
and the remaining n-1 bits as data storage.
If the a 0 bit followed by the n-1 bits of data
can be stored into the block without toggle the trap bit,
the client uses that as his cleartext.
Otherwise he chooses a 1 bit followed by the complement of his data,
which should not toggle the trap bit.

At the end of a configuration,
the relay transmits the output of each exchange to the trustees.
The trustees then reveal their trap secrets
in order to determine the trap bits.
If no trap bits have been triggered,
they continue on to the next configuration.
If a trap bit has been triggered,
the trustees perform the blame analysis as described in Dissent in Numbers.

- Configuration Events

At regular intervals,
the trustees and relay will form a new online client set, or configuration,
that works within the current session.
Clients gracefully leave by registering to do so prior
to a configuration event.
Clients that leave outside of a configuration event are exceptions.
There exist two alternative cases:
a client announces its intention to leave
without waiting for a configuration event
and a client disappears without notice.
In either case,
the relay waits until the end of the current configuration,
at which point, the relays and servers perform a re-configuration.

There are two conditions for being included in a configuration.
A client already in a current configuration
will automatically be included in the upcoming configuration.
A client that misses all exchanges in an entire configuration
will be considered disconnected from the upcoming configuration.
A disconnected or offline client who was not in the current configuration
must register for two upcoming configurations
prior to be included as online in the second of the two configurations.
Effectively, we require cycle users offline and online
over the course of an entire configuration.

- Extending to multiple slots

We can then extend this to multiple slots
by treating each slot as an independent DC-net.
In order to produce seeds for generating the random ciphertext strings,
trustees and clients incorporate the public DH key --
hash(shared secret | cell index | slot DH key).

- Handling client churn

The relay and trustees can maintain a reputation for clients.
Clients that frequently and abruptly leave may not even be included
in configurations for certain slots
or a configuration event may occur more quickly
in order to make progress on that slot.
Secondly, a client that is no longer in a possinymity set
should not be in a configuration for that slot.

- Slot format

We could probably just reuse something similar to Dissent in Numbers
without the randomize function
as the trap bit component proposed herein replaces it.
