import random
import hashlib
import binascii
from Crypto.Util.number import bytes_to_long

# these can be swapped out with proper numbers or generators
# get p
def getPrime():
    prime = "B10B8F96 A080E01D DE92DE5E AE5D54EC 52C99FBC FB06A3C6"
    "9A6A9DCA 52D23B61 6073E286 75A23D18 9838EF1E 2EE652C0"
    "13ECB4AE A9061123 24975C3C D49B83BF ACCBDD7D 90C4BD70"
    "98488E9C 219A7372 4EFFD6FA E5644738 FAA31A4F F55BCCC0"
    "A151AF5F 0DC8B4BD 45BF37DF 365C1A65 E68CFDA7 6D4DA708"
    "DF1FB2BC 2E4A4371"
    return strtoLong(prime)

# get g (large base)
def getBase():
    base = "A4D1CBD5 C3FD3412 6765A442 EFB99905 F8104DD2 58AC507F"
    "D6406CFF 14266D31 266FEA1E 5C41564B 777E690F 5504F213"
    "160217B4 B01B886A 5E91547F 9E2749F4 D7FBD7D3 B9A92EE1"
    "909D0D22 63F80A76 A6A24C08 7A091F53 1DBF0A01 69B6A28A"
    "D662A4D1 8E73AFA3 2D779D59 18D08BC8 858F4DCE F97C2A24"
    "855E6EEB 22B3B2E5"
    return strtoLong(base)

# get random secret
def getQ():
    q = 3
    return


def strtoLong(s):
    s = bytes("".join(s.split()), "utf-8")
    s = binascii.a2b_hex(s)
    return bytes_to_long(s)

# DiffieHellman class enables construction of keys capable of performing
# D-H exchanges, and interactive proof of knowledge
class DiffieHellman:
    # initializes public component based on well known prime and base
    # initalizes private component (can be chosen or generated)
    def __init__(self, secret = getQ()):
        self.base = getBase()
        self.prime = getPrime()
        self.secret = secret
        self.public = pow(self.base, self.secret, self.prime)

    # get shared secret: (g^b)^a mod p
    def getSharedSecret(self, remote_pub):
        return pow(remote_pub, self.secret, self.prime)

    # Given the public key of B (remote_pub), shows that the shared secret
    # between A and B was generated by A.
    # Returns zero-knowledge proof of shared Diffie-Hellman secret between A & B.
    def proveSharedSecret(self, remote_pub):
        phi = self.prime - 1;
        prover_pub = self.public
        secret = self.getSharedSecret(remote_pub)

        # Random key in the group Z_q
        randKey = DiffieHellman(secret=5) # random secret
        commit1 = randKey.public
        commit2 = randKey.getSharedSecret(remote_pub)

        # shift and hash
        concat = self.base << prover_pub << remote_pub << secret
        concat << commit1 << commit2

        hashid = hashlib.md5()
        hashid.update(str(concat).encode("utf-8"))
        challenge = int(hashid.hexdigest(), 16)
        print(challenge)

        product = (self.secret * challenge) % phi
        response = (randKey.secret - product) % phi

        # print ("first", commit1, commit2, challenge, response)
        return (secret, challenge, response)

    # Verifies proof generated above. Verifier c is showing that
    # shared secret between A and B was generated by A.
    # returns 0 if if verification fails; returns shared secret otherwise
    def verifySharedSecret(self, prover_pub, remote_pub, secret, challenge,
     response):
        prime = self.prime
        public = self.public
        base = self.base

        # g^r * (a's public key)^challenge
        commit1 = pow(base, response, prime) * pow(public, challenge, prime)

        # (b's public key)^response * (secret)^challenge
        commit2 = pow(remote_pub, response, prime) * pow(secret, challenge, prime)

        # Shift and hash
        prenewhash = base << prover_pub << remote_pub << secret
        prenewhash << commit1 << commit2

        hashid = hashlib.md5()
        hashid.update(str(prenewhash).encode("utf-8"))
        newhash = int(hashid.hexdigest(), 16)
        print(newhash)

        if challenge == newhash:
            return secret
        else:
            return 0

# test section
a = DiffieHellman()
b = pow(getBase(), 3, getPrime())  # I just picked a random number for test case

results = a.proveSharedSecret(b)
print (a.verifySharedSecret(a.public, b,
    results[0], results[1], results[2]))
