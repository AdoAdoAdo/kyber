Doc issues:
- reflect.Value.Set: says "assigns x to the value v"; swap x and v.

Wishlist for Go standard library changes:
- cipher.Stream: define XORKeyStream semantics such that if src is null
	or shorter than dst, dst is padded out with random bytes (rand XOR 0).
	This would be more convenient and efficient when Stream is used
	as a pseudo-random byte generator, and would also be more secure
	in the event of program bugs than allowing the unmatched dst bytes
	to be "left unencrypted".
- Reverse() function in 'bytes' package to reverse byte-order of a byte-slice.
	Or alternatively, endian-selectable Bytes/GetBytes in math.big.
	Or a byte-slice-reversal function in encoding package.
- big.Int needs:
	- modular Sqrt and Jacobi functions
	- bit-field instructions: fill, scan, insert, extract
- Shouldn't elliptic.CurveParams have a field for cofactor,
	to support anything other than NIST prime-order curves?
- strings package should contain a String interface containing only:
	func String() string
- bytes.Buffer needs a SetBytes() method.
- It appears to be impossible to use an unkeyed element-list to initialize
	a struct that contains any blank fields (e.g., padding).
	If you don't list an element corresponding to the blank field,
	then the compiler complains about the next field being the wrong type;
	it's clearly expecting to see something listed for the blank field.
	But if you do list an element of the correct type for the blank field,
	then the compiler complains "cannot refer to blank field or method".
	Although you can still initialize such structs using keys,
	it seems unfortunate and unnecessary to lose the sometimes valuable
	ability to have the compiler check statically that your struct
	literal initializes all the (useful) fields of the struct.
	This brings the question of how struct-literals with blanks
	_should_ be initialized with unkeyed struct literals:
	two obvious answers seem to be (a) don't require them
	to be listed at all (just have the compiler skip over them), or
	(b) for consistency-checking, require them to be listed
	but with some syntax indicating "no value", e.g., just "...,_,...".
- Why does the test framework produce documentation for
	ExampleEncode_test1() but not ExampleEncode_Test1()?
	Is this just a bug or is there a reason for this finickyness?

